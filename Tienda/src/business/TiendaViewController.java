package business;

import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import java.net.URL;
import java.util.ArrayList;
import java.util.Optional;
import java.util.ResourceBundle;

import domain.Cliente;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TableView;

public class TiendaViewController implements Initializable {
	@FXML
	private TextField txtName;
	@FXML
	private TextField txtIdentification;
	@FXML
	private TextField txtCode;
	@FXML
	private TextArea txtAddress;
	@FXML
	private ComboBox<String> cmbTypeClient;
	@FXML
	private Button btnSave;
	@FXML
	private Button btnCancel;
	@FXML
	private TableView<Cliente> tableClients;

	private ArrayList<Cliente> listClients;

	// Event Listener on Button[#btnSave].onAction
	@FXML
	public void btnSaveOnAction(ActionEvent event) {

		if (validateFormClient().isEmpty()) {
			Cliente client = new Cliente();
			listClients.add(setClient(client));
			System.out.println( listClients.getFirst());
			showAlert("Éxito", "¡Cliente registrado exitosamente!");
		} else {
			showAlert("Error", validateFormClient());
		}
	}

	// Event Listener on Button[#btnCancel].onAction
	@FXML
	public void btnCancelOnAction(ActionEvent event) {
		// TODO Autogenerated
	}

	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {

		String[] clientTypes = { "Inactivo", "Activo", "Frecuente" };

		ObservableList<String> items = FXCollections.observableArrayList(clientTypes);

		cmbTypeClient.setItems(items);
		cmbTypeClient.setValue("Seleccione un tipo de cliente");

		listClients = new ArrayList<Cliente>();

	}

	private Optional<ButtonType> showAlert(String title, String message){
		Alert alert = new Alert(title.equalsIgnoreCase("Error") ? Alert.AlertType.ERROR : title.equalsIgnoreCase(" Éxito") ? Alert.AlertType.INFORMATION : Alert.AlertType.CONFIRMATION);
		alert.setHeaderText(null);
		alert.setTitle(title);
		alert.setContentText(message);
		return alert.showAndWait();
	}

	private String validateFormClient() {

		if (txtName.getText().isEmpty()) {
			return "¡El campo <Nombre> es requerido!";
		} else if (txtIdentification.getText().isEmpty()) {
			return "¡El campo <Identificación> es requerido!";
		} else if (txtCode.getText().isEmpty()) {
			return "¡El campo <Codigo> es requerido!";
		} else if (txtAddress.getText().isEmpty()) {
			return "¡El campo <Direccion> es requerido!";
		} else if (cmbTypeClient.getSelectionModel().getSelectedIndex() < 0) {
			return "¡Debes seleccionar un tipo de cliente!";
		} else {
			return "";
		}
	}

	private Cliente setClient(Cliente client) {
		client.setName(txtName.getText());
		client.setIdentification(txtIdentification.getText());
		client.setCode(txtCode.getText());
		client.setAddress(txtAddress.getText());
		client.setTypeClient(cmbTypeClient.getSelectionModel().getSelectedItem());
		return client;
	}

}
